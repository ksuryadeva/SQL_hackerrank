/* Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
*/

Select distinct city from station where LOWER(substr(city,1,1)) in ('a','e','i','o','u');
--https://www.techonthenet.com/oracle/functions/substr.php

SELECT DISTINCT city from station where REGEXP_LIKE (CITY ,'^([AEIOU])');
--https://www.techonthenet.com/oracle/regexp_like.php

Select DISTINCT CITY from STATION where CITY LIKE 'A%' or CITY LIKE 'E%' or CITY LIKE 'I%' or CITY LIKE 'O%' or CITY LIKE 'U%';

----------------------------------------------------------------------------------------------------
/*Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
*/

Select DISTINCT CITY from STATION where REGEXP_LIKE (CITY, '([aeiou])$');
SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,LENGTH(CITY),1)) IN ('a','e','i','o','u');
SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,-1,1)) IN ('a','e','i','o','u');

------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.
*/

Select Distinct CITY from STATION where REGEXP_LIKE(city,'^[a|e|i|o|u].*[a|e|i|o|u]$','i'); -- 'i' Perform case-insensitive matching. 'c' Perform case-sensitive matching.

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(UPPER(CITY), '^[AEIOU].+[AEIOU]$');

select distinct(city) from station where REGEXP_LIKE(city,'^[AEIOU].*[aeiou]$');

select distinct(city) from station where substr(city,1,1) in ('A','E','I','O','U') and substr(city,-1,1) in ('a','e','i','o','u');

select distinct city from station where upper(substr(city,1,1)) = any('A','E','I','O','U') and upper(substr(city,-1,1)) = any('A','E','I','O','U');

select distinct(city) from station where upper(substr(city,1,1)) in ('A','E','I','O','U') and upper(substr(city,-1,1)) in ('A','E','I','O','U') ;

------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
*/

Select DISTINCT CITY from STATION where UPPER(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U');

Select distinct(city) from station where REGEXP_LIKE(city,'^[^AEIOU]');

Select distinct(city) from station where REGEXP_LIKE(UPPER(city),'^[^AEIOU]');

------------------------------------------------------------------------------------------------------
/*Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
*/

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(CITY, '[^aeiou]$');

SELECT DISTINCT CITY FROM STATION WHERE SUBSTR(UPPER(CITY), -1, 1) NOT IN ('A','E','I','O','U');

--------------------------------------------------------------------------------------------------------
/*Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. 
Your result cannot contain duplicates.
*/

SELECT DISTINCT CITY FROM STATION WHERE SUBSTR(UPPER(CITY), 1, 1) NOT IN ('A','E','I','O','U') OR SUBSTR(UPPER(CITY), -1, 1) NOT IN ('A','E','I','O','U');

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(LOWER(CITY), '^[^aeiou]|[^aeiou]$');

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(UPPER(CITY), '^[^AEIOU]') OR REGEXP_LIKE(UPPER(CITY), '[^AEIOU]$');

--------------------------------------------------------------------------------------------------------
/*Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. 
Your result cannot contain duplicates.
*/

SELECT DISTINCT CITY FROM STATION WHERE SUBSTR(UPPER(CITY), 1, 1) NOT IN ('A','E','I','O','U') AND SUBSTR(UPPER(CITY), -1, 1) NOT IN ('A','E','I','O','U');

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(UPPER(CITY), '^[^AEIOU].+[^AEIOU]$');

SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(UPPER(CITY), '^[^AEIOU]') AND REGEXP_LIKE(UPPER(CITY), '[^AEIOU]$');

---------------------------------------------------------------------------------------------------------

/*Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Not A Triangle: The given values of A, B, and C don't form a triangle.
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
*/

/*
SELECT              
           CASE WHEN A + B > C AND B + C > A AND A + C > B THEN
                CASE 
                    WHEN A = B AND B = C THEN 'Equilateral'
                    WHEN A = B OR B = C OR A = C THEN 'Isosceles'
                    ELSE 'Scalene'
                END
            ELSE 'Not A Triangle'
        END
FROM TRIANGLES;

/*
select 
     case when A + B <= C OR A + C <= B OR C + B <= A then 'Not A Triangle' 
          when A = B and B = C then 'Equilateral'
          when A = B or B = C or A = C then 'Isosceles'
          when A != B AND B != C then 'Scalene'
          else null end
from triangles;
*/

/*
SELECT CASE
    WHEN A + B + C - 2*greatest(A,B,C) <= 0 THEN 'Not A Triangle'
    WHEN A NOT IN (B, C) AND B != C THEN 'Scalene'
    WHEN A = B AND B = C THEN 'Equilateral'
    ELSE 'Isosceles' 
END
FROM triangles;
*/

/*
SELECT CASE
WHEN (A+B <= C OR B+C <= A OR C+A <= B) THEN 'Not A Triangle'
WHEN (A = B AND B = C) THEN 'Equilateral'
WHEN ((A = B AND C <> A) OR (A = C AND B <> A)) THEN 'Isosceles'
ELSE 'Scalene' 
END
FROM TRIANGLES;
*/

Select 
    case when a=b and b=c then 'Equilateral' 
         when (a+b<=c) or (a+c<=b) or (b+c<=a) then 'Not A Triangle' 
         when (a=b) or (b=c) or (c=a) then 'Isosceles' else 'Scalene' 
    end 
from triangles;

--------------------------------------------------------------------------------------------------------
/*
Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 

There are total [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.
*/

Select (name||'('||UPPER(substr(occupation,1,1))||')') from occupations order by name;
Select ('There are total '||count(name)||' '||lower(occupation)||'s.') from occupations group by occupation order by count(name), occupation;


SELECT NAME||'('||substr(OCCUPATION,1,1)||')' FROM OCCUPATIONS ORDER BY NAME; 
SELECT 'There are total '||COUNT(OCCUPATION)||' '||LOWER(occupation)||'s.' FROM OCCUPATIONS GROUP BY OCCUPATION ORDER BY COUNT(OCCUPATION),OCCUPATION;

-------------------------------------------------------------------------------------------------------------

